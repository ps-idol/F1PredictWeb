{"version":3,"sources":["DriverListRow.js","DriverList.js","BarGraphTooltip.js","BarGraphBar.js","PredictionsGraph.js","Predictions.js","App.js","serviceWorker.js","index.js"],"names":["DriverList","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","className","selected","react_default","a","createElement","onClick","id","width","height","style","fill","color","driver","constructor","React","Component","rowClicked","did","setState","state","isMobile","expanded","window","matchMedia","matches","_this2","display","min-width","order","map","DriverListRow_DriverList","key","drivers","toString","name","BarGraphTooltip","_React$Component","inherits","createClass","value","console","log","backgroundColor","label","BarGraphBar","BarGraphTooltip_BarGraphTooltip","PredictionsGraph","positions","toConsumableArray","Array","keys","i","predictions","valueAsPercentage","BarGraphBar_BarGraphBar","Predictions","handleDriverSelection","selectedDriverId","onToggleQualiOptionsSelected","changeQualiExpanded","onNewQualiSelected","selection","fetch","then","res","json","gpTitle","concat","racesList","mostRecentId","undefined","collator","Intl","Collator","numeric","sensitivity","years","sort","compare","_loop","races","push","length","reverse","predictionsForDriver","driverColor","react_select_browser_esm","options","onChange","DriverList_DriverList","PredictionsGraph_PredictionsGraph","App","href","Predictions_Predictions","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acc67523.chunk.js","sourcesContent":["import React from 'react';\nimport \"./driver-list-row.css\";\n\n/**\n * An individual row element in a driver list\n */\nexport default class DriverList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let className = \"driver-list-row\";\n        if (this.props.selected) {\n            className += \" \" + \"selected\";\n        }\n        return (\n            <tr className={className} onClick={() => this.props.onClick(this.props.id)} >\n                <td className=\"driver-list-cell\">\n                    <svg width=\"8\" height=\"16\" style={{fill: this.props.color}} >\n                        <rect width=\"7\" height=\"20\"></rect>\n                    </svg>\n                    <span>{this.props.driver}</span>\n                </td>\n                <td className=\"driver-list-cell\">{this.props.constructor}</td>\n            </tr>\n        );\n    }\n}","import React from 'react';\n\nimport \"./driver-list.css\";\nimport DriverListRow from './DriverListRow';\n\n/**\n * The driver list component used in showing participating drivers\n */\nexport default class DriverList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {selected: -1, isMobile: false};\n    }\n\n    componentDidMount() {\n        var mq = window.matchMedia( \"(max-width: 768px)\" );\n        if (mq.matches) {\n            this.setState({isMobile: true, expanded: true});\n        }\n    }\n\n    rowClicked = (did) => {\n        this.setState({selected: did});\n        this.props.rowClicked(did);\n        if (this.state.isMobile) {\n            this.setState({expanded: !this.state.expanded});\n        }\n    };\n\n    render() {\n        return (\n            <div style={{\"display\": \"flex\", \"width\": \"100%\", \"min-width\": \"300px\"}}>\n                <table className=\"driver-list-table\">\n                    <thead>\n                        <tr>\n                            <th>Driver</th>\n                            <th>Constructor</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.order.map(id => {\n                            if (this.state.isMobile && !this.state.expanded && (this.state.selected !== id)) {\n                                return null;\n                            }\n                            return <DriverListRow\n                                key={id}\n                                id={id}\n                                selected={this.state.selected === id ? true : false}\n                                driver={this.props.drivers[id.toString()].name}\n                                constructor={this.props.drivers[id.toString()].constructor}\n                                color={this.props.drivers[id.toString()].color} \n                                onClick={this.rowClicked} />;\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './BarGraphTooltip.css';\n\n/**\n * A reusable tooltip for a bar chart\n */\nexport class BarGraphTooltip extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        console.log(this.props.value);\n        return (\n            <div className=\"barGraphTooltip\" style={{backgroundColor: this.props.color}}>{this.props.label}</div>\n        );\n    }\n}","import React from 'react';\nimport { BarGraphTooltip } from './BarGraphTooltip';\nimport './BarGraphBar.css';\n\n/**\n * A single row in a bar chart.\n */\nexport class BarGraphBar extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        console.log(this.props.value);\n        return (\n            <div className=\"barGraphRowContainer\">\n                <div className=\"barGraphLabel\">{this.props.label}</div>\n                <div className=\"barGraphBar\" style={{width: this.props.value, backgroundColor: this.props.color}} />\n                {this.props.value !== '0%' ?\n                    <BarGraphTooltip color={this.props.color} label={this.props.value} /> :\n                    null\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { BarGraphBar } from './BarGraphBar';\n\n/**\n * The bar graph used in showing predicted results for each driver\n */\nexport class PredictionsGraph extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const positions = [...Array(20).keys()];\n        return (\n            <div className=\"barChart\">\n                {positions.map(i => {\n                    const value = this.props.predictions ? this.props.predictions[i.toString()] : null;\n                    const valueAsPercentage = value ? (value / 10.0) + \"%\" : \"0%\";\n                    return <BarGraphBar  \n                        value={valueAsPercentage}\n                        label={i + 1}\n                        color={this.props.color ? this.props.color : \"#00000000\"}\n                    />;\n                })}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Select from 'react-select';\n\nimport DriverList from './DriverList';\nimport { PredictionsGraph } from './PredictionsGraph';\nimport './Predictions.css';\n\n/**\n * The parent component for F1 predictions. It contains state for which predictions to use.\n */\nexport default class Predictions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drivers: {},\n            order: [],\n            predictions: {},\n            selectedDriverId: null,\n            gpTitle: \"\",\n            racesList: {},\n            changeQualiExpanded: false\n        };\n\n        //Fetch index file, sort the years and races in it\n        //TODO How does this relate to React lifecycle...\n        const indexFileName = 'data/index.json';\n        let mostRecentId = undefined;\n        const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n        fetch(indexFileName)\n            .then(res => {\n                return res.json();\n            })\n            .then(res => {\n                const years = Object.keys(res).sort(collator.compare);\n                //For each year:\n                console.log(\"Above loop\" + years);\n                const racesList = [];\n                for (let i = 0; i < years.length; i++) {\n                    const races = Object.keys(res[years[i]]).sort(collator.compare);\n                    races.map(id => (\n                        racesList.push({ value: id, label: `${years[i]} ${res[years[i]][id]}` })\n                    ));\n                    console.log(races);\n\n                    //Select most recent race.\n                    console.log(\"In loop\");\n                    mostRecentId = races[races.length - 1];\n                    \n                }\n                racesList.reverse();\n                this.setState({ racesList });\n                fetch('data/' + mostRecentId + '.json')\n                    .then(res => {\n                        return res.json();\n                    })\n                    .then(res => {\n                        this.setState({\n                            drivers: res[\"drivers\"],\n                            order: res[\"order\"],\n                            predictions: res[\"predictions\"],\n                            gpTitle: `${res[\"year\"]} ${res[\"name\"]}`,\n                        });\n                    });\n            });\n    }\n\n    handleDriverSelection = (did) => {\n        console.log(did);\n        this.setState({ selectedDriverId: did });\n    };\n\n    onToggleQualiOptionsSelected = () => {\n        this.setState({changeQualiExpanded: !this.state.changeQualiExpanded});\n    }\n\n    onNewQualiSelected = selection => {\n        console.log(selection);\n        fetch('data/' + selection.value + '.json')\n            .then(res => {\n                return res.json();\n            })\n            .then(res => {\n                this.setState({\n                    drivers: res[\"drivers\"],\n                    order: res[\"order\"],\n                    predictions: res[\"predictions\"],\n                    gpTitle: `${res[\"year\"]} ${res[\"name\"]}`,\n                });\n            });\n    }\n\n    render() {\n        const predictionsForDriver = this.state.selectedDriverId ? this.state.predictions[this.state.selectedDriverId] : {};\n        const driverColor = this.state.selectedDriverId ? this.state.drivers[this.state.selectedDriverId].color : null; \n        return (\n            <div>\n                <div className=\"qualiHeader\">\n                    <span className=\"qualiHeaderText\">{this.state.gpTitle} - Qualifying predictions</span>\n                    <button onClick={this.onToggleQualiOptionsSelected} className='toggleQualiOptionsButton'>\n                        { this.state.changeQualiExpanded ?  'Cancel' : 'Change GP' }\n                    </button>\n                    {this.state.changeQualiExpanded ?<div>\n                        <Select\n                            className='qualiOptionsSelect'\n                            value={this.state.gpTitle}\n                            options={this.state.racesList}\n                            onChange={this.onNewQualiSelected}\n                        />\n                    </div> : null}\n                </div>\n                <div className=\"mainContainer\">\n                    <DriverList \n                        rowClicked={this.handleDriverSelection}\n                        drivers={this.state.drivers}\n                        order={this.state.order} \n                    />\n                    <div style={{\"min-width\": \"300px\", \"width\": \"100%\"}}>\n                        {this.state.selectedDriverId ?\n                            <div className=\"selectedDriverText\" \n                                style={{color: this.state.drivers[this.state.selectedDriverId].color}}>\n                                {this.state.drivers[this.state.selectedDriverId].name}\n                            </div> : \n                            <div className=\"selectedDriverText\" style={{color: '#888888'}}>Choose your driver:</div>\n                        }\n                        <PredictionsGraph\n                            predictions={predictionsForDriver}\n                            color={driverColor} \n                            selectedDriverId={this.state.selectedDriverId} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Predictions from './Predictions'\n\nfunction App() {\n    return (\n        <div>\n            <div className=\"pageHeader\">\n                <h1 id=\"gpNameHeader\">F1 Qualification predictions</h1>\n                <a href=\"https://predictf1.blogspot.com/\" style={{display: 'none'}}>Blog</a>\n            </div>\n            <div id=\"background\">\n                <Predictions />\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}